swagger: "2.0"

info:
  title: "{{title}}"
  version: "1.0"

basePath: /v1.0

securityDefinitions:
    oauth:
        type: oauth2
        flow: password
        tokenUrl: https://ouath.example/token
        x-tokenInfoUrl: https://ouath.example/token_info
        scopes:
            myscope: can do stuff
    something_else:
        type: something_else

paths:
  /greeting/{name}:
    post:
      summary: Generate greeting
      description: Generates a greeting message.
      operationId: fakeapi.hello.post_greeting
      responses:
        200:
          description: greeting response
          schema:
            type: object
      parameters:
        - name: name
          in: path
          description: Name of the person to greet.
          required: true
          type: string

  /greetings/{name}:
    get:
      summary: Generate greeting
      description: Generates a greeting message with custom mimetype
      operationId: fakeapi.hello.get_greetings
      produces:
        - application/x.connexion+json
      responses:
        200:
          description: greeting response
          schema:
            type: object
      parameters:
        - name: name
          in: path
          description: Name of the person to greet.
          required: true
          type: string

  /bye/{name}:
    get:
      summary: Generate goodbye
      description: Generates a goodbye message.
      operationId: fakeapi.hello.get_bye
      produces:
        - text/plain
      responses:
        200:
          description: goodbye response
          schema:
            type: string
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      parameters:
        - name: name
          in: path
          description: Name of the person to say bye.
          required: true
          type: string

  /problem:
    get:
      summary: Fails
      description: Fails
      operationId: fakeapi.hello.with_problem
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /other_problem:
    get:
      summary: Fails
      description: Fails
      operationId: fakeapi.hello.with_problem_txt
      produces:
        - text/plain
      security:  # this will be ignored
        - something_else:
          - scope
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /list/{name}:
    get:
      summary: Generate a greeting in a list
      description: Generate a greeting in a list
      operationId: fakeapi.hello.get_list
      produces:
        - application/json
      security:  # this will disable security
        - oauth:
            - myscope
        - something_else
      responses:
        200:
          description: a greeting in a list
          schema:
            type: array
            items:
              type: string
      parameters:
        - name: name
          in: path
          description: Name of the person to say hello to.
          required: true
          type: string

  /byesecure/{name}:
    get:
      summary: Generate goodbye
      description: Generates a goodbye message.
      operationId: fakeapi.hello.get_bye_secure
      security:
        - oauth:
            - myscope
      produces:
        - text/plain
      responses:
        200:
          description: goodbye response
          schema:
            type: string
      parameters:
        - name: name
          in: path
          description: Name of the person to say bye.
          required: true
          type: string

  /except:
    get:
      summary: Fails badly
      description: Fails badly
      operationId: fakeapi.hello.internal_error
      produces:
        - text/plain
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /multimime:
    get:
      summary: Has multiple content types
      description: Has multiple content types
      operationId: fakeapi.hello.multimime
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /empty:
    get:
      summary: Returns empty response
      description: Returns empty response
      operationId: fakeapi.hello.empty
      produces:
        - application/json
      responses:
        204:
          description: empty

  /test_schema:
    post:
      summary: Returns the image_version
      description: Returns the image_version
      operationId: fakeapi.hello.schema
      parameters:
        - name: new_stack
          required: true
          in: body
          schema:
            $ref: '#/definitions/new_stack'
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            $ref: '#/definitions/new_stack'

  /test_schema/response/object/{valid}:
    get:
      summary: Returns an image_version as an object
      description: Returns image_version
      operationId: fakeapi.hello.schema_response_object
      produces:
        - application/json
      parameters:
        - name: valid
          in: path
          description: Whether to return a valid or invalid schema in the response body
          required: true
          type: string
      responses:
        200:
          description: Requested new_stack data model
          schema:
            $ref: '#/definitions/new_stack'

  /test_schema/response/string/{valid}:
    get:
      summary: Returns an image_version as a string
      description: Returns image_version
      operationId: fakeapi.hello.schema_response_string
      produces:
        - text/plain
      parameters:
        - name: valid
          in: path
          description: Whether to return a valid or invalid schema in the response body
          required: true
          type: string
      responses:
        200:
          description: Requested new_stack data model
          schema:
            type: string

  /test_schema/response/integer/{valid}:
    get:
      summary: Returns an image_version as an integer
      description: Returns image_version
      operationId: fakeapi.hello.schema_response_integer
      produces:
        - text/plain
      parameters:
        - name: valid
          in: path
          description: Whether to return a valid or invalid schema in the response body
          required: true
          type: string
      responses:
        200:
          description: Requested new_stack data model
          schema:
            type: integer

  /test_schema/response/number/{valid}:
    get:
      summary: Returns an image_version as a number(float)
      description: Returns image_version
      operationId: fakeapi.hello.schema_response_number
      produces:
        - text/plain
      parameters:
        - name: valid
          in: path
          description: Whether to return a valid or invalid schema in the response body
          required: true
          type: string
      responses:
        200:
          description: Requested new_stack data model
          schema:
            type: number

  /test_schema/response/boolean/{valid}:
    get:
      summary: Returns an image_version as a boolean
      description: Returns image_version
      operationId: fakeapi.hello.schema_response_boolean
      produces:
        - text/plain
      parameters:
        - name: valid
          in: path
          description: Whether to return a valid or invalid schema in the response body
          required: true
          type: string
      responses:
        200:
          description: Requested new_stack data model
          schema:
            type: boolean

  /test_schema/response/array/{valid}:
    get:
      summary: Returns an image_version as a boolean
      description: Returns image_version
      operationId: fakeapi.hello.schema_response_array
      produces:
        - application/json
      parameters:
        - name: valid
          in: path
          description: Whether to return a valid or invalid schema in the response body
          required: true
          type: string
      responses:
        200:
          description: Requested new_stack data model
          schema:
            type: array
            items:
              schema:
                $ref: '#/definitions/new_stack'

  /test_schema_in_query:
    post:
      summary: Returns the image_version
      description: Returns the image_version
      operationId: fakeapi.hello.schema_query
      parameters:
        - name: image_version
          required: true
          in: query
          type: string
        - name: not_required
          required: false
          in: query
          type: string
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            $ref: '#/definitions/new_stack'

  /test_schema_list:
    post:
      summary: Returns empty response
      description: Returns empty response
      operationId: fakeapi.hello.schema_list
      parameters:
        - name: new_stack
          required: true
          in: body
          schema:
            type: array
            items:
              type: string
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /test_schema_map:
    post:
      summary: Returns empty response
      description: Returns empty response
      operationId: fakeapi.hello.schema_map
      parameters:
        - name: new_stack
          required: true
          in: body
          schema:
            type: object
            additionalProperties:
              $ref: '#/definitions/new_stack'
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /test_schema_recursive:
    post:
      summary: Returns empty response
      description: Returns empty response
      operationId: fakeapi.hello.schema_recursive
      parameters:
        - name: new_stack
          required: true
          in: body
          schema:
            $ref: '#/definitions/simple_tree'
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /test_schema_format:
    post:
      summary: Returns empty response
      description: Returns empty response
      operationId: fakeapi.hello.schema_format
      parameters:
        - name: timestamp
          required: true
          in: body
          schema:
            type: string
            format: date-time
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /test_not_implemented:
    post:
      summary: Returns empty response
      description: Returns empty response
      operationId: fakeapi.hello.test_not_implemented
      parameters:
        - name: new_stack
          required: true
          in: body
          schema:
            $ref: '#/definitions/new_stack'
      produces:
        - application/json
      responses:
        200:
          description: goodbye response
          schema:
            type: string

  /test_parameter_validation:
    get:
      operationId: fakeapi.hello.test_parameter_validation
      parameters:
        - name: date
          in: query
          type: string
          format: date
        - name: int
          in: query
          type: integer
        - name: bool
          in: query
          type: boolean

  /test_required_query_param:
    get:
      operationId: fakeapi.hello.test_required_query_param
      parameters:
        - name: n
          in: query
          type: number
          required: true

  /test_array_csv_query_param:
    get:
      operationId: fakeapi.hello.test_array_csv_query_param
      parameters:
        - name: items
          in: query
          description: An comma separated array of items
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv

  /test_array_pipes_query_param:
    get:
      operationId: fakeapi.hello.test_array_pipes_query_param
      parameters:
        - name: items
          in: query
          description: An pipe separated array of items
          required: true
          type: array
          items:
            type: integer
          collectionFormat: pipes

  /test_array_unsupported_query_param:
    get:
      operationId: fakeapi.hello.test_array_unsupported_query_param
      parameters:
        - name: items
          in: query
          description: An pipe separated array of items
          required: true
          type: array
          items:
            type: string
          collectionFormat: unsupported

  /test_no_content_response:
    get:
      operationId: fakeapi.hello.test_no_content_response
      responses:
        204:
          description: No content returned

  /schema_array:
    get:
      tags:
      description: test schema array
      operationId: fakeapi.hello.test_schema_array
      parameters:
        - name: test_array
          in: body
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK

  /schema_int:
    get:
      tags:
      description: test schema int
      operationId: fakeapi.hello.test_schema_int
      parameters:
        - name: test_int
          in: body
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK

  /goodday/{name}:
    post:
      summary: Generate good day greeting
      description: Generates a good day message.
      headers:
        Location:
          type: string
          description: The URI of the created resource
      operationId: fakeapi.hello.post_goodday
      responses:
        201:
          description: gooday response
          headers:
            Location:
              type: string
              description: The URI of the created resource
          schema:
            type: object
      parameters:
        - name: name
          in: path
          description: Name of the person to greet.
          required: true
          type: string

  /goodday/noheader:
    post:
      summary: Generate good day greeting
      description: Generates a good day message.
      operationId: fakeapi.hello.post_goodday_no_header
      responses:
        201:
          description: gooday response
          headers:
            Location:
              type: string
              description: The URI of the created resource
          schema:
            type: object

  /goodevening/{name}:
    post:
      summary: Generate good evening
      description: Generates a good evening message.
      headers:
        Location:
          type: string
          description: The URI of the created resource
      operationId: fakeapi.hello.post_goodevening
      produces:
        - text/plain
      responses:
        201:
          description: goodevening response
          headers:
            Location:
              type: string
              description: The URI of the created resource
          schema:
            type: string
      parameters:
        - name: name
          in: path
          description: Name of the person to say good evening.
          required: true
          type: string

  /resolver-test/method:
    get:
      summary: Test class instance method
      operationId: fakeapi.hello.class_instance.test_method

  /resolver-test/classmethod:
    get:
      summary: Test class instance method
      operationId: fakeapi.hello.DummyClass.test_classmethod

  /test-int-path/{someint}:
    get:
      summary: Test type casting of path parameter
      operationId: fakeapi.hello.test_get_someint
      parameters:
        - name: someint
          in: path
          type: integer
  /test-float-path/{somefloat}:
    get:
      summary: Test type casting of path parameter
      operationId: fakeapi.hello.test_get_somefloat
      parameters:
        - name: somefloat
          in: path
          type: number


  /test-default-query-parameter:
    get:
      summary: Test if default parameter is passed to function
      operationId: fakeapi.hello.test_default_param
      parameters:
        - name: name
          in: query
          type: string
          default: connexion

  /test-default-object-body:
    post:
      summary: Test if default object body param is passed to handler.
      operationId: fakeapi.hello.test_default_object_body
      parameters:
        - name: stack
          type: object
          in: body
          default:
            'image_version': 'default_image'
          schema:
            $ref: '#/definitions/new_stack'

  /test-default-integer-body:
    post:
      summary: Test if default integer body param is passed to handler.
      operationId: fakeapi.hello.test_default_integer_body
      parameters:
        - name: stack_version
          type: integer
          in: body
          default: 1

  /test-falsy-param:
    get:
      summary: Test if default value when argument is falsy.
      operationId: fakeapi.hello.test_falsy_param
      parameters:
        - name: falsy
          type: integer
          in: query
          default: 1

  /test-formData-param:
    post:
      summary: Test formData parameter
      operationId: fakeapi.hello.test_formData_param
      parameters:
        - name: formData
          type: string
          in: formData
          required: true

  /test-formData-missing-param:
    post:
      summary: Test formData missing parameter in handler
      operationId: fakeapi.hello.test_formData_missing_param
      parameters:
        - name: missing_formData
          type: string
          in: formData
          required: true

  /test-bool-param:
    get:
      summary: Test usage of boolean default value
      operationId: fakeapi.hello.test_bool_default_param
      parameters:
        - name: thruthiness
          type: boolean
          in: query
          default: false

  /test-bool-array-param:
    get:
      summary: Test usage of an array of booleans value
      operationId: fakeapi.hello.test_bool_array_param
      parameters:
        - name: thruthiness
          in: query
          type: array
          items:
            type: boolean

  /test-required-param:
    get:
      summary: Test required param without default value
      operationId: fakeapi.hello.test_required_param
      parameters:
        - name: simple
          type: string
          in: query
          required: true

  /test-redirect-endpoint:
    get:
      summary: Tests handlers returning flask.Response objects
      operationId: fakeapi.hello.test_redirect_endpoint
      responses:
        302:
          description: 302 Found

  /test-redirect-response-endpoint:
    get:
      summary: Tests handlers returning flask.Response objects
      operationId: fakeapi.hello.test_redirect_response_endpoint
      responses:
        302:
          description: 302 Found

  /test-204-with-headers:
    get:
      summary: Tests that response code 204 can have headers set
      operationId: fakeapi.hello.test_204_with_headers
      responses:
        204:
          headers:
            X-Something:
              description: A value that might be send in the response
              type: string
          description: 204 no content

  /test-204-with-headers-nocontent-obj:
    get:
      summary: Tests that response code 204 using NoContent obj can have headers set
      operationId: fakeapi.hello.test_nocontent_obj_with_headers
      responses:
        204:
          headers:
            X-Something:
              description: A value that might be send in the response
              type: string
          description: 204 no content

  /parameters-in-root-path:
    parameters:
      - in: query
        name: title
        type: string
        description: Some parameter in the path
        required: true
    get:
      summary: Test the method GET with parameter from path
      operationId: fakeapi.hello.path_parameters_in_get_method
      responses:
        200:
          description: Everything is OK

definitions:
  new_stack:
    type: object
    properties:
      image_version:
        type: string
        description: Docker image version to deploy
    required:
      - image_version
  simple_tree:
    type: object
    properties:
      children:
        type: array
        items:
          $ref: "#/definitions/simple_tree"
        description: Docker image version to deploy
    additionalProperties: false
